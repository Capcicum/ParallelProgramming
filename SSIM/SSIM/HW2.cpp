#include <opencv2/core/core.hpp>
#include <opencv2/highgui/highgui.hpp>
#include <opencv2/opencv.hpp>
#include "utils.h"
#include <cuda.h>
#include <cuda_runtime.h>
#include <string>

//return types are void since any internal error will be handled by quitting
//no point in returning error codes...
//returns a pointer to an RGBA version of the input image
//and a pointer to the single channel grey-scale output
//on both the host and device

void preProcess(unsigned char **h_refImageGray, unsigned char **h_noiseImageGray,
                float **d_filter, unsigned int *filterWidth,
				unsigned int *numCols, unsigned int *numRows, 
                const std::string &noiseImageFilename,
				const std::string &refImageFilename) {

  //make sure the context initializes ok
  checkCudaErrors(cudaFree(0));

  cv::Mat noiseImage = cv::imread(noiseImageFilename.c_str(), CV_LOAD_IMAGE_GRAYSCALE);
  if (noiseImage.empty()) {
    std::cerr << "Couldn't open file: " << noiseImageFilename << std::endl;
    exit(1);
  }

  cv::Mat refImage = cv::imread(refImageFilename.c_str(), CV_LOAD_IMAGE_GRAYSCALE);
  if (refImage.empty()) {
	  std::cerr << "Couldn't open file: " << refImageFilename << std::endl;
	  exit(1);
  }

  *h_noiseImageGray = noiseImage.data;
  *h_refImageGray = refImage.data;

  *numRows = noiseImage.rows;
  *numCols = noiseImage.cols;

  //now create the filter that they will use
  const int blurKernelWidth = 11;
  const float blurKernelSigma = 2.;

  *filterWidth = blurKernelWidth;

  //create and fill the filter we will convolve with

  checkCudaErrors(cudaMalloc(d_filter, sizeof(float)*noiseImage.rows*noiseImage.cols));

  float filter[blurKernelWidth*blurKernelWidth] = {
	  0.0000010575655981, 0.0000078144115330, 0.00003702247708274, 0.0001124643551166, 0.0002190506528660, 0.0002735611600858,
	  0.0002190506528660, 0.0001124643551166, 0.00003702247708274, 0.0000078144115330, 0.0000010575655981,
	  0.0000078144115330, 0.0000577411251978, 0.00027356116008580, 0.0008310054290871, 0.0016185775625343, 0.0020213587583625,
	  0.0016185775625343, 0.0008310054290871, 0.00027356116008580, 0.0000577411251978, 0.0000078144115330,
	  0.0000370224770827, 0.0002735611600858, 0.00129605559384320, 0.0039370692628467, 0.0076683638252367, 0.0095766274902403,
	  0.0076683638252367, 0.0039370692628467, 0.00129605559384320, 0.0002735611600858, 0.0000370224770827,
	  0.0001124643551166, 0.0008310054290871, 0.00393706926284679, 0.0119597604100370, 0.0232944324734871, 0.0290912256485504,
	  0.0232944324734871, 0.0119597604100370, 0.00393706926284679, 0.0008310054290871, 0.0001124643551166,
	  0.0002190506528660, 0.0016185775625343, 0.00766836382523672, 0.0232944324734871, 0.0453713590956603, 0.0566619704916846,
	  0.0453713590956603, 0.0232944324734871, 0.00766836382523672, 0.0016185775625343, 0.0002190506528660,
	  0.0002735611600858, 0.0020213587583625, 0.00957662749024030, 0.0290912256485504, 0.0566619704916846, 0.0707622377639470,
	  0.0566619704916846, 0.0290912256485504, 0.00957662749024030, 0.0020213587583625, 0.0002735611600858,
	  0.0002190506528660, 0.0016185775625343, 0.00766836382523672, 0.0232944324734871, 0.0453713590956603, 0.0566619704916846,
	  0.0453713590956603, 0.0232944324734871, 0.00766836382523672, 0.0016185775625343, 0.0002190506528660,
	  0.0001124643551166, 0.0008310054290871, 0.00393706926284679, 0.0119597604100370, 0.0232944324734871, 0.0290912256485504,
	  0.0232944324734871, 0.0119597604100370, 0.00393706926284679, 0.0008310054290871, 0.0001124643551166,
	  0.0000370224770827, 0.0002735611600858, 0.00129605559384320, 0.0039370692628467, 0.0076683638252367, 0.0095766274902403,
	  0.0076683638252367, 0.0039370692628467, 0.00129605559384320, 0.0002735611600858, 0.0000370224770827,
	  0.0000078144115330, 0.0000577411251978, 0.00027356116008580, 0.0008310054290871, 0.0016185775625343, 0.0020213587583625,
	  0.0016185775625343, 0.0008310054290871, 0.00027356116008580, 0.0000577411251978, 0.0000078144115330,
	  0.0000010575655981, 0.0000078144115330, 0.00003702247708274, 0.0001124643551166, 0.0002190506528660, 0.0002735611600858,
	  0.0002190506528660, 0.0001124643551166, 0.00003702247708274, 0.0000078144115336, 0.0000010575655981 };

  checkCudaErrors(cudaMemcpy((*d_filter), filter, sizeof(float)*noiseImage.rows*noiseImage.cols, cudaMemcpyHostToDevice));
}
